package com.example.demo.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.tags.Tag;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Arrays;
import java.util.List;

/**
* Enhanced OpenAPI 3.0 configuration for my-api API
* Generated by Spring Boot API Generator
*/
@Configuration
public class OpenApiConfig {

@Bean
public OpenAPI customOpenAPI() {
return new OpenAPI()
.info(apiInfo())
.servers(serversList())
.tags(tagsList());
}

private Info apiInfo() {
return new Info()
.title("my-api REST API")
.description("Comprehensive API for my-api application with full CRUD operations")
.version("1.0.0")
.contact(apiContact())
.license(apiLicense());
}

private Contact apiContact() {
return new Contact()
.name("API Support Team")
.email("support@example.com")
.url("https://www.example.com/support");
}

private License apiLicense() {
return new License()
.name("MIT License")
.url("https://opensource.org/licenses/MIT");
}

private List<Server> serversList() {
    Server developmentServer = new Server()
    .url("http://localhost:8080")
    .description("Development server");

    Server productionServer = new Server()
    .url("https://api.example.com")
    .description("Production server");

    return Arrays.asList(developmentServer, productionServer);
    }    private List<Tag> tagsList() {
        return Arrays.asList(
            new Tag()
            .name("patient")
            .description("Operations related to Patient management"),
            new Tag()
            .name("doctor")
            .description("Operations related to Doctor management"),
            new Tag()
            .name("appointment")
            .description("Operations related to Appointment management"),
            new Tag()
            .name("prescription")
            .description("Operations related to Prescription management"),
            new Tag()
            .name("medicalrecord")
            .description("Operations related to MedicalRecord management"),
            new Tag()
            .name("department")
            .description("Operations related to Department management"),
            new Tag()
            .name("room")
            .description("Operations related to Room management"),
            new Tag()
            .name("staff")
            .description("Operations related to Staff management"),
            new Tag()
            .name("bill")
            .description("Operations related to Bill management")
        );
        }
        }